name: Branch Automation

on:
  pull_request:
    types: [opened, closed, reopened]
  issues:
    types: [opened, closed, reopened, labeled]

jobs:
  manage_branches:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Validate Branch Name
        if: github.event_name == 'pull_request' && github.event.action == 'opened'
        uses: actions/github-script@v6
        with:
          script: |
            const branchName = context.payload.pull_request.head.ref;
            const issueTypes = {
              '[Env]': 'env/',
              '[Feature]': 'feat/',
              '[Bug]': 'fix/',
              '[Enhancement]': 'enhance/',
              '[Security]': 'security/',
              '[Performance]': 'perf/'
            };
            
            const validPrefix = Object.values(issueTypes).some(prefix => 
              branchName.startsWith(prefix)
            );
            
            if (!validPrefix) {
              core.setFailed(`Branch name "${branchName}" does not follow naming convention. Should start with: ${Object.values(issueTypes).join(', ')}`);
            }

      - name: Auto-assign Reviewers
        if: github.event_name == 'pull_request' && github.event.action == 'opened'
        uses: actions/github-script@v6
        with:
          script: |
            const reviewers = ['reviewer1', 'reviewer2']; // Configure your reviewers
            await github.rest.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              reviewers: reviewers
            });

      - name: Cleanup Branch
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
        uses: actions/github-script@v6
        with:
          script: |
            const branch = context.payload.pull_request.head.ref;
            try {
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `heads/${branch}`
              });
              console.log(`Deleted branch: ${branch}`);
            } catch (error) {
              console.log(`Error deleting branch: ${error}`);
            }

      - name: Create Branch from Issue
        if: github.event_name == 'issues' && github.event.action == 'opened'
        uses: actions/github-script@v6
        with:
          script: |
            const title = context.payload.issue.title;
            const issueNumber = context.payload.issue.number;
            
            // Extract issue type from title
            const typeMatch = title.match(/^\[(Env|Feature|Bug|Enhancement|Security|Performance)\]/);
            if (!typeMatch) {
              console.log('No valid issue type found in title');
              return;
            }
            
            const typePrefix = {
              'Env': 'env',
              'Feature': 'feat',
              'Bug': 'fix',
              'Enhancement': 'enhance',
              'Security': 'security',
              'Performance': 'perf'
            }[typeMatch[1]];
            
            // Create branch name
            const baseBranch = 'develop';
            const sanitizedTitle = title
              .replace(/^\[.*?\]\s*/, '')
              .replace(/\(#P\d\)$/, '')
              .trim()
              .toLowerCase()
              .replace(/[^a-z0-9]+/g, '-')
              .replace(/^-+|-+$/g, '');
            
            const branchName = `${typePrefix}/issue-${issueNumber}-${sanitizedTitle}`;
            
            try {
              // Get the SHA of the base branch
              const baseRef = await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `heads/${baseBranch}`
              });
              
              // Create new branch
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/heads/${branchName}`,
                sha: baseRef.data.object.sha
              });
              
              console.log(`Created branch: ${branchName}`);
              
              // Add comment to issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `Created branch \`${branchName}\` for this issue.`
              });
            } catch (error) {
              console.log(`Error creating branch: ${error}`);
            }
