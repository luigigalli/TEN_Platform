openapi: 3.0.0
info:
  title: TEN API Documentation
  version: 1.0.0
  description: API documentation for The Experiences Network (TEN)
  contact:
    name: API Support
    url: https://docs.ten.network/support
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: '{protocol}://{host}:{port}'
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      host:
        default: localhost
      port:
        default: '3000'

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: connect.sid
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    Error:
      type: object
      properties:
        status:
          type: string
          enum: [error]
          description: Error status indicator
        code:
          type: string
          description: Error code for client handling
        message:
          type: string
          description: Human-readable error message
        details:
          type: object
          description: Additional error details
    ValidationError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            details:
              type: object
              additionalProperties:
                type: array
                items:
                  type: string
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: User ID
        email:
          type: string
          format: email
          description: User email
        firstName:
          type: string
          description: User first name
        lastName:
          type: string
          description: User last name
        bio:
          type: string
          description: User biography
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
      required:
        - id
        - email
        - firstName
        - lastName
    CreateUserDto:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email
        password:
          type: string
          format: password
          minLength: 8
          description: User password
        firstName:
          type: string
          minLength: 2
          maxLength: 50
          description: User first name
        lastName:
          type: string
          minLength: 2
          maxLength: 50
          description: User last name
        bio:
          type: string
          maxLength: 500
          description: User biography
      required:
        - email
        - password
        - firstName
        - lastName
    UpdateUserDto:
      type: object
      properties:
        firstName:
          type: string
          minLength: 2
          maxLength: 50
          description: User first name
        lastName:
          type: string
          minLength: 2
          maxLength: 50
          description: User last name
        bio:
          type: string
          maxLength: 500
          description: User biography
    LoginDto:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email
        password:
          type: string
          format: password
          description: User password
      required:
        - email
        - password

tags:
  - name: Auth
    description: Authentication endpoints
  - name: Users
    description: User management endpoints
  - name: Health
    description: Health check endpoints

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check endpoint
      description: Check if the service is healthy
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  timestamp:
                    type: string
                    format: date-time
  
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login user
      description: Authenticate user with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /auth/logout:
    post:
      tags:
        - Auth
      summary: Logout user
      description: End user session
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Logout successful
  
  /users:
    post:
      tags:
        - Users
      summary: Create user
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    
    get:
      tags:
        - Users
      summary: List users
      description: Get a list of users with pagination
      security:
        - cookieAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Items per page
        - in: query
          name: sort
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Sort direction
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
                  page:
                    type: integer
                  pages:
                    type: integer
  
  /users/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: User ID
    
    get:
      tags:
        - Users
      summary: Get user
      description: Get user by ID
      security:
        - cookieAuth: []
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    patch:
      tags:
        - Users
      summary: Update user
      description: Update user information
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete user account
      security:
        - cookieAuth: []
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
